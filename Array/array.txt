1. What is an Array?
2. Declaring and Initialiing an Array.
3. Accessing Array.

1. What is an Array?
---------------------
-> Array is a collection of elements and all the elements are of the same types.
So, Array is a collection of similar data elements grouped under 1 name.

Syntax:
--------
Datatype Variable_name[size];

Example:
int A[5];   //Here 5 elements of int datatype can be stored.
If each byte occupies 4 bytes of memory then, the memory will be occupied as follows:

  100 104 108 112 116  120  <--Memory occupied contiguously by Array.
    ---------------------
 A  |   |   |   |   |   |
    ---------------------
      0   1   2   3   4  <-----Index

int x=10;  <---Scalar Variable since it has only magnitude and single valued variable.

int A[5];  <---Vector Variable since it has magnitude as well as Dimension and multiple variables.

A[2]=15;    <--Using name and index we can access any integers or elements in an Array.

2. Declaring and Initialiing an Array:
--------------------------------------
-->int A[5];   //Declaration of an Array with datatype int with size: 5

      0   1   2   3   4  <-----Index
    ---------------------
 A  |   |   |   |   |   |
    ---------------------
  100 104 108 112 116  120  <--Memory occupied contiguously by Array.

-->since, this is only decalaration and Array is not initialized, the value inside Array will be 
Garbage value.

-->int A[5]={2,4,6,8,10};  //Declaration with Initialization of an Array.

      0   1   2   3   4  <-----Index
    ---------------------
 A  | 2 | 4 | 6 | 8 | 10|   <----Here, Array of size 5 is created at run-time and value will be
    ---------------------        initialized 
  100 104 108 112 116  120  <--Memory occupied contiguously by Array.

-->int A[5]={2,4}; //Declaration with Initialization of few Elements.

      0   1   2   3   4  <-----Index
    ---------------------
 A  | 2 | 4 | 0 | 0 | 0 |   <----Here, Array of size 5 is created at run-time and only 2 values
    ---------------------        will be assigned and remaining spaces will be assigned 0. 
  100 104 108 112 116  120  <--Memory occupied contiguously by Array.

-->int A[5]={0};  ////Declaration with Initialization of an Array with all elements as 0.

      0   1   2   3   4  <-----Index
    ---------------------
 A  | 0 | 0 | 0 | 0 | 0 |   <----Here, Array of size 5 is created at run-time and all values
    ---------------------        will be assigned 0. 
  100 104 108 112 116  120  <--Memory occupied contiguously by Array.

-->int A[]={2,4,6,8,10};  //Initialization of an array without mentioning size.
Depending upon the no. of elements we have mentioned in the initialization list, the array size
will be the same as that one. So, Array of size 5 will be created and all values will be assigned.

      0   1   2   3   4  <-----Index
    ---------------------
 A  | 2 | 4 | 6 | 8 | 10|   <----Here, Array of size 5 is created at run-time and all values
    ---------------------        will be assigned as mentioned in initialization list. 
  100 104 108 112 116  120  <--Memory occupied contiguously by Array.


3. Accessing Array:
--------------------

int A[5]={2,4,6,8,10};
Here, we have an array of size 5 with initialization list of values. So, during run-time, Array
will be created like this:
      0   1   2   3   4  <-----Index
    ---------------------
 A  | 2 | 4 | 6 | 8 | 10|   <----Here, Array of size 5 is created at run-time and all values
    ---------------------        will be assigned as mentioned in initialization list. 
  100 104 108 112 116  120  <--Memory occupied contiguously by Array.

-->For printing any value:
----------------------------

printf("%d", A[0]); //Prints the value at index 0.
printf("%d", A[1]); //Prints the value at index 1.

So, we can access all elements by just changing the index.

-->Traversing through the Array. (Traversing means visiting the arrays.)
-------------------------------------------------------------------------
for(int i=0; i<5; i++)
{
 printf("%d", A[i]); //Prints the value at index i.   
}

-->Accessing Array elements methods:
-------------------------------------
printf("%d", A[2]); //Prints the value at index 2.
printf("%d", 2[A]); //Prints the value at index 2.

Using pointer arithmetic also we can access the array elements:
---------------------------------------------------------------
printf("%d", *(A+2)); //Prints the value at index 2. 

/////////////////////////////////////////////////////////////////////////////////////
--->Static vs Dynamic Arrays:
-----------------------------
Static Array means the size of an array is static and Dynamic Array means the size of an array
is Dynamic.
Once an Array is created, it's size can't be modified.

Static Array:
-------------
Once an Array is created, it's size can't be modified.
Example:
int main()
{
int A[5];
}
So, here an array of size 5 will be created in stack section of RAM memory as an activation
record of main function in RAM.
It is static because the size of Array is decided at compile time, though the memory will be
allocated during run-time only. Definitely, the size of an array is to be decided at compile
time in C language.

In C language, when we are mentioning size of an array, it must be a constant value. It can't be
variable. But in C++ we can create array of any size at run-time. It will be created in stack
only.

Example:
int main()
{
    int n;  //size
    cin>>n; 
    int A[n];   //size is decided at run-time in C++.
}

--->Memory Allocation in Heap:
-------------------------------
->Array which is created inside heap, whose type and size is decided at run-time.
->For accessing anything in Heap, we must have pointer, Since, we can't access heap memory directly

Example:
int main()
{
int A[5];
int *p; //p is also a variable which will get memory assigned in stack section only.
p=(int*)malloc(sizeof(int)*5);  //So, array with size of 5 int will be created in Heap and p will
                                //point to that memory.
....
....
....
free(p);  //If the memory in heap is not required, then we must free that memory to avoid memory
}         //leak, Since, if we don't free or delete that occupied unused memory, then it will cause
          //memory leak.
We will get memory in heap when we use 'malloc' in C or 'new' in C++.
in C++:
p=new int[5]; //C++

If the memory in heap is not required, then we must free that memory to avoid memory leak, Since, 
if we don't free or delete that occupied unused memory, then it will cause memory leak. Following
are the methods of deallocation:

-->In C:
free(p)

-->In C++:
delete []p;

--->Accessing memory in heap:
-------------------------------
int main()
{
int A[5];
int *p;
p=(int*)malloc(sizeof(int)*5);

p[0]=2;

free(p);  //If the memory in heap is not required, then we must free that memory to avoid memory
}

With the help of pointers we can access the memory in heap section:
p[0]=2;
Here p will have the address of first element of array allocated in heap.

Stack      Heap
 P        0   1   2   3   4  <-----Index
-----   ---------------------
|100|-->| 2 |   |   |   |   |   <----This memory has been allocated in heap section of memory
-----   ---------------------         
         100 104 108 112 116  120  <--Memory occupied contiguously by Array.

So, pointer acts as a name of array.

--->NOTE:Whether Array is created in stack or Array is created in heap, Once, Array with some
size is created, It can't be resized again or it's size can't be changed directly.
There is some other way for resizing the array. But that is also possible in heap section only
and not in Stack section. We can't resize same array but with some alternate ways we can acheive
resizing the array.

Dynamic Arrays:
---------------
int *p=(int*)malloc(sizeof(int)*5);

Here, already we have an array of size 5 created in Heap and pointer p is pointing to that array.
Now, suppose, size of 5 is not sufficient and we require larger size array, then one method for
increasing the size is as follows:

->Take 1 more pointer i.e. For here q and create a new array of required larger size.

int *q=(int*)malloc(sizeof(int)*n); //Here n can be any size depend upon requirement.

->Now transfer all elements from first pointer array to newly created pointer's array:

for(int i=0; i<5; i++)
{
  q[i]=p[i];
}
We can also use memcopy function also to copy elements from 1 array to another.

->Make first pointer point to the newly created pointer's array but before that delete or free-up
the memory occupied by first pointer array:

free(p);

->Make first Make first pointer point to the newly created pointer's array:
i.e. For here make p point to q:

p=q;

->Remove second pointer since First pointer is pointing to newly created array:

q=NULL;

Q] Why the array size can't be grown?
->Because the memory for the array should be contigous and we don't know wether the consecutive
location of memory after array is free or not. That is the reason we say that Array size can't be
increased or regrown.

////////////////////////////////////////////////////////////////////////////////////
2D Arrays:
----------
->In Programming Languages we have multi-dimensional arrays. We can have 1-dimensional array,
2-dimensional array or 3-dimensional array, but the language allows us to have n-dimensional
arrays.
->Most commonly used array is 2D Array which is mostly used for implementing Matrices or for
tabular data.

-->How to create 2D Arrays in C:
--------------------------------
There are 3 methods for creating 2D Arrays:

1st Method:
===========
Normal Declaration of 2D arrays alongwith name of an array, Datatype of an array and Dimensions.

int A[3][4];

So, we visualize that an Array of size 3X4 is created in main memory i.e 3 Rows and 4 Columns.

        0   1   2   3
  A   -----------------
    0 |   |   |   |   |
      -----------------
    1 |   |   |   |   |
      -----------------
    2 |   |   |   |   |
      -----------------
A 2D array with 3 Rows and 4 Columns. Indices will be 0,1,2 for rows and 0,1,2,3 for columns.
We represent 2D array in form of rectangle but memory allocated for 2D array will be linear only.

    -----------------------------
    |      |      |      |      |
    |      |      |      |      |
    |100   |104   |108   |112   |
    -----------------------------     Address: 100 - 144
    |      |      |      |      |
    |      |      |      |      |
    |116   |120   |124   |128   |
    -----------------------------
    |      |      |      |      |
    |      |      |      |      |
    |132   |136   |140   |144   |
    -----------------------------
This means in real the memory will be allocated like a single dimension array with 3*4=12 integers.
So, compiler allows us to access that single dimensional array in form of 2D array with rows and
columns.

-->Accessing elements in 2D arrays:
-----------------------------------
Following values will be stored in 2D array as follows:
A[1][2]=15
    0       1       2     3
  -----------------------------
  |      |      |      |      |
0 |      |      |      |      |
  |100   |104   |108   |112   |
  -----------------------------     Address: 100 - 144
  |      |      | 15   |      |
1 |      |      |      |      |
  |116   |120   |124   |128   |
  -----------------------------
  |      |      |      |      |
2 |      |      |      |      |
  |132   |136   |140   |144   |
  -----------------------------

-->Declaration and Initialization of 2D arrays:
------------------------------------------------
int A[3][4]={{1,2,3,4}, {5,6,7,8}, {9,10,11,12}};
So a 2D array with 3 rows and 4 columns can be initialized with elements as mentioned in above
example.

Here also, this 2D array will be initialized in stack section of memory only.

2nd Method:
===========
-> We can take an "array of pointers"

int *p[3];  <---This is an array of integer pointers.

Actually, p is an array of 3 integer pointers here. Now it will act as row. And, further arrays
will be created in heap section of memory.

    p           0     1       2     3
  --------    ---------------------------
  |      |    |     |      |      |     |
0 |      |--> |     |      |      |     |
  |100   |    ---------------------------
  --------    --------------------------- 
  |      |    |     |      |      |     |
1 |      |--> |     |      |      |     |
  |104   |    ---------------------------
  --------    ---------------------------
  |      |    |     |      |      |     |
2 |      |--> |     |      |      |     |
  |108   |    ---------------------------
  --------    
So, this is nothing but Array of Array of Arrays. So, we have 3 arrays(pointer) pointing to 
those 3 arrays(of 4 columns) and togerher they form 2D arrays.
Syntax for creating 2D array with "array of pointers".

int*p[3];
p[0]=(int*)malloc(sizeof(int)*4);
p[1]=(int*)malloc(sizeof(int)*4);
p[2]=(int*)malloc(sizeof(int)*4);

So, memory of all those 3 arrays will be created in heap and all those arrays will be pointed
by arrays of p present in Stack section of memory.
->Elements can be stored in this array as same as 2D array discussed in 1st method like as follows:
p[1][2]=15;

    p           0     1       2     3
  --------    ---------------------------
  |      |    |     |      |      |     |
0 |      |--> |     |      |      |     |
  |100   |    ---------------------------
  --------    --------------------------- 
  |      |    |     |      |  15  |     |
1 |      |--> |     |      |      |     |
  |104   |    ---------------------------
  --------    ---------------------------
  |      |    |     |      |      |     |
2 |      |--> |     |      |      |     |
  |108   |    ---------------------------
  --------    

3rd Method:
===========
-> We can use double pointer for creating 2D arrays. All arrays will be created in heap section
of memory as follows:

-->Declaration and Initialization of 2D array with double pointers:
-------------------------------------------------------------------
int **p;  <---p is a double pointer which is created in stack section of memory.
p=(int*)malloc(sizeof(int*)*3); <--Array of pointers of type integer.
Here, pointer p is pointing to 3 arrays of pointers which has been created in heap.

p[0]=(int*)malloc((sizeof(int)*4));
p[1]=(int*)malloc((sizeof(int)*4));
p[2]=(int*)malloc((sizeof(int)*4));

So, after above declaration, array will look like as below:

p
----
|  |---|
|  |   |
----   |         0     1       2     3
  --------    ---------------------------
  |      |    |     |      |      |     |
0 |      |--> |     |      |      |     |
  |100   |    ---------------------------
  --------    --------------------------- 
  |      |    |     |      |      |     |
1 |      |--> |     |      |      |     |
  |104   |    ---------------------------
  --------    ---------------------------
  |      |    |     |      |      |     |
2 |      |--> |     |      |      |     |
  |108   |    ---------------------------
  --------    

Here entire structure is in heap now. Only double pointer p is in stack section of memory.

-->Accessing elements in 2D array:
---------------------------
The 2D array can be accessed using nested 2 for loops:

for(int i=0; i<3; i++)
{
  for(int j=0; j<4; j++)
  {
    p[i][j]=?(Any_Value)
  }
}
-->This will help to traverse through all elements in 2D array row by row.

