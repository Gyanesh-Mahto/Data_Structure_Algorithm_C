                                                Linked List_Readme

Created by: Gyanesh Mahto
Date: 24-12-2019

-->What is linked list?
Linked list is a collection of nodes where each node contains data and pointer to next node.
There is a head node which is pointing to the first node of linked list.
The nodes are not side by side in heap section of the memory. But continuity is maintained by links.
head Node  Node-1   Node-2
|-----|     |----|   |----|
| D|*p|---->|D|*p|-->|D|*p|
|-----|     |----|   |----|
D->Data
*p->Pointer to next node

-->How can we define a node?
For defining a node we have to define 2 things: Data and a pointer. Data can be any type(int, float, etc..) and pointer is of node type.

Node:
__________
|    |    |
|Data|Next|
|____|____|

In C we can define this Node as struct node with members:Data(of any data type) and self referential structure pointer.
struct Node
{
int data;
struct Node *p;
};

On 64 bit compiler, this Node is occupying 8 bytes of memory(4 bytes of data and 4 bytes of struct node pointer)

-->How to create a pointer?
For creating a Node we need a pointer, the pointer is created in stack section of memory and with the help of this pointer we will create a Node
in heap section of the memory with DMA.
struct Node *p; //Here the memory will be allocated in stack OR this pointer is created in stack section of the memory.

Now we have to create node in heap section of the memory, So, we will use DMA concept:

p=(struct Node*)malloc(sizeof(struct Node));
p->pointer
(struct Node*)->Typecasting to struct Node* type

-->How to access Node members?
Suppose p is pointing to the node created in heap, then
p->data=10(value);
p->Next=0;
   P    Node
        _________
_____   |   |   |
|   |   |10 |\0 |
| P |-->|   |   |
-----   ---------

Summary:
struct Node
{
int data;
struct Node *Next;
};
p=(struct Node*)malloc(sizeof(struct Node));
p->data=10;//(value)
p->Next=0;

-->Some syntaxes:
struct Node *p, *q;
1. q=p;    //Whatever is there in p will be assigned to q. So, if p is pointing to some node then q will also point to the same node.
2. q=p->next    //So, here q will be assigned address of the next node pointed by p.
3. p=p->next;   //So, here p will be point to the next node from the current node.

1. For making pointer p to point NULL:
struct node *p=NULL;
2. But if the pointer is pointing to some node then it's value will not be NULL.

Condition to check whether a node is pointing to some node or not:
if(p==NULL)----->|
if(p==0)-------->|-->Both will satisfy first statement if pointer p is pointing to NULL.
if(!p)---------->|

But if pointer p is pointing to some node then we can check that with following conditions:
if(p!=NULL)------>|
if(p!=0)--------->|----->Both will satisfy second statement if pointer p is pointing to some node.
if(p)------------>|

3. Now if we want to check whether there is some more node after the node pointed by p or not:
if(p->next==NULL)----->|____Here after p's node there is no other node.
if(p->next==0)-------->|
if(p->next!=NULL)------>|___Here after p's node there exists some more nodes.
if(p->next!=0)--------->|

//Displaying a linked list:
->For displaying a linked list, we must first know how to traverse in a linked list. Traversing means visiting all the nodes in a linked list
once.
        Node1       Node2       Node3       Node4       Node5
  head  _______     _______     _______     _______     _______   
 ____   |  |  |     |  |  |     |  |  |     |  |  |     |  |  |
|    |  | 8|34|---->|3 |44|---->|7 |54|---->|12|92|---->|9 |\0|
| 20 |->|  |  |     |  |  |     |  |  |     |  |  |     |  |  |
 ----   -------     -------     -------     -------     -------
        20          34             44           54      92 

For traversing First we should take a pointer pointing to first Node.
struct Node *p=head;    //With this line p will be a pointer pointing to the first node(Here that is 20).
p=p->next;              //Now p is pointing to next node(Here that is 34)

Now this thing must be done repeatedly. So we should use while loop instead of writing p=p->next repeatedly:
while(p)        //We must continue this till p is not NULL
{
    printf("%d\n", p->data);
    p=p->next;      //It will help in traversing entire linked list
}

With traversing we can display elements, count nodes, we can search for an element, sort the element.

We can make a function also for displaying the nodes in linked list.
display(struct Node* p)     //Display function for displaying the nodes in a linked list.   
{
    printf("%d", p->data);
    p=p->next;
}

display(first); //Function call  

//Recursive function for displaying the linked list
For writing display function recursively we must write continuation with condition
void Display(struct Node *p)
{
    if(p)
    {
    printf("%d", p->data);
    Display(p->Next);
    }
}

Here Display function will call itself for pointing p to the next node.
Note:->Recursion uses stack contents

-->Recursive function for displaying the reverse linked list
void Recursive_Display(struct Node *p)
{
    if(p)
    {
    Recursive_Display(p->Next);
    printf("%d", p->data);
    }
}
Here after condition checking function call is happening, so data will not be printed, but after p==0, then data will be printed reversed due to
the activation record created by recursive function call.

//Counting nodes in a linked list:
For counting the nodes, we will use traverse method:
        Node1       Node2       Node3       Node4       Node5
  head  _______     _______     _______     _______     _______   
 ____   |  |  |     |  |  |     |  |  |     |  |  |     |  |  |
|    |  | 8|34|---->|3 |44|---->|7 |54|---->|12|92|---->|9 |\0|
| 20 |->|  |  |     |  |  |     |  |  |     |  |  |     |  |  |
 ----   -------     -------     -------     -------     -------
        20          34             44           54      92 

We will traverse through the linked list until we reach last node and every time we should go on counting.
First we will take a variable count initially with the value 0 and as it traverses we will increment the count with value 1.

-->Iterative function for counting nodes in a linked list
int count(struct Node *p)     //Function for counting the nodes
{
int count=0;
while(p)
{
    count+=1;
    p=p->next;
}
return count;
}

count(head);    //Function Call

-->Recursive function for counting nodes in a linked list(FIRST METHOD).
Here, we are making function call for recursive count within condition after incrementing the count value.
Here we have kept count variable as static because once the variable is assigned with the value, it will not change with the recursive function
call.

int recursive_count(struct Node *p)     //Function for counting the nodes
{
static int count=0;
if(p)
{
    count+=1;
    recursive_count(p->Next);
}
return count;
}

-->Recursive function for counting nodes in a linked list(SECOND METHOD).

int second_method_recursive_count(struct Node *p)     //Function for counting the nodes
{
if(p==0)
return 0;
else
return(second_method_recursive_count(p->Next)+1);
}

//Sum of all elements in a Node:
1. Iterative method:
int sum_of_all_elements(struct Node *p)
{
    int sum=0;
    while(p)
    {
        sum=sum+p->data;
        p=p->Next;
    }
    return sum;
}

2. Recursive method:
int recursive_sum_of_all_elements(struct Node *p)
{
    static int sum=0;
    if(p)
    {
        sum=sum+p->data;
        recursive_sum_of_all_elements(p->Next);
    }
    return sum;
}

//Finding Maximum valued element in a linked list
        Node1       Node2       Node3       Node4       Node5
  head  _______     _______     _______     _______     _______   
 ____   |  |  |     |  |  |     |  |  |     |  |  |     |  |  |
|    |  | 8|34|---->|3 |44|---->|7 |54|---->|12|92|---->|9 |\0|
| 20 |->|  |  |     |  |  |     |  |  |     |  |  |     |  |  |
 ----   -------     -------     -------     -------     -------
        20          34             44           54      92 

For finding a maximum valued element in a linked list, we will first take a variable max to compare the data.
int max=0;
We will compare the node data with max, if node data is greater then we will assign that node data value to max.
if(p->data>max)
    {
    max=p->data;
    }

#program: Iteratively
int maximum_valued_element(struct Node *p)
{
    int max=0;
    while(p)
    {
        if(p->data>max)
        {
        max=p->data;
        p=p->Next;
        }
        else
        p=p->Next;
    }
    return max;
}

#program: Recursively:
int recursive_maximum_valued_element(struct Node *p)
{
    static int max=0;
    if(p)
    {
    if(p->data>max)
    {
        max=p->data;
        recursive_maximum_valued_element(p->Next);
    }
    else
        recursive_maximum_valued_element(p->Next);
    return max;
    }
}

//Searching element in a linked list:
There are 2 methods for searching an element in a linked list:
1. Linear search: It is a sequential search. It will search the element linearly.
2. Binary search: It will work only on sorted list and it will check only on middle of the list. If the element is found than it's OK,
   If it is small it will check on left hand side otherwise if it is bigger then it will check on right hand side.

But Binary search can't be performed on linked list because we can not go directly in the middle of the linked list.
We have to traverse in the linked list linearly. Let's understand linear search:
        Node1       Node2       Node3       Node4       Node5
  head  _______     _______     _______     _______     _______   
 ____   |  |  |     |  |  |     |  |  |     |  |  |     |  |  |
|    |  | 8|34|---->|3 |44|---->|7 |54|---->|12|92|---->|9 |\0|
| 20 |->|  |  |     |  |  |     |  |  |     |  |  |     |  |  |
 ----   -------     -------     -------     -------     -------
        20          34             44           54      92 

Suppose we have to search key 12, then we will look for 12 from the first node and we will compare to check if the node data is 12. If found
then stop searching.

#program: Iteratively
int search_element(struct Node *p, int key)
{
    while(p)
    {
        if(key==p->data)
        return 1;
        else
        p=p->Next;
    }
}

#program: Recursively
int recursive_search_element(struct Node *p, int key)
{
    if(p==NULL)
    return NULL;
    if(key==p->data)
    return 1;
    return recursive_search_element(p->Next, key);
}

#Another method: Iteratively:
struct Node* another_search_method(struct Node *p, int key)
{
    while(p)
    {
        if(key==p->data)
        return(p);
        p=p->Next;
    }
    return NULL;
}

#Another method: Recursively:
struct Node* recursive_another_search_method(struct Node *p, int key)
{
    if(p==NULL)
    return NULL;
    if(key==p->data)
    return p;
    return recursive_another_search_method(p->Next, key);
}

-->Improving searching in a linked list:
Now there are 2 methods to improve linear search:
1. Transposition
2. Move towards head

1. Transposition:
Here we interchange value of a node with previous value.

2. Move to head:
Here key value is brought in the beginning so that next time if we are searching for the key, it is found in 1 comparison.

But in linked list, Transposition is not recommended because we don't do movement of data in a linked list. So, we prefer movement of node.
We will see that with example:

        Node1       Node2       Node3       Node4       Node5
  head  _______     _______     _______     _______     _______   
 ____   |  |  |     |  |  |     |  |  |     |  |  |     |  |  |
|    |  | 8|34|---->|3 |44|---->|7 |54|---->|12|92|---->|9 |\0|
| 20 |->|  |  |     |  |  |     |  |  |     |  |  |     |  |  |
 ----   -------     -------     -------     -------     -------
        20          34             44           54      92 

Here the key=12(We want to search 12). So, we have to bring that node in beginning. So, how it can be achieved.
struct Node *q=NULL;
q=p;
//Here q pointer will follow p pointer.
-->(1) First we have to make the node 7 next value to point to node 9.
q->next=p->next;
-->(2) Then we will make node 12 to point to node 8
p->next=first;
-->(3) we will update head pointer to the address of node 12.
first=p;
All this is achieved with 2 pointers

#program:
struct Node* search(struct Node *p, int key)
{
    struct Node *q=NULL;
    while(p)
    {
        if(key==p->data)
        {
            q->next=p->next;
            p->next=first;
            first=p;
        }
        q=p;
        p=p->next;
    }
}
-->Now the nodes are arranges as follows:

        Node1       Node2       Node3       Node4       Node5
  head  _______     _______     _______     _______     _______   
 ____   |  |  |     |  |  |     |  |  |     |  |  |     |  |  |
|    |  |12|20|---->|8 |34|---->|3 |44|---->|7 |92|---->|9 |\0|
| 54 |->|  |  |     |  |  |     |  |  |     |  |  |     |  |  |
 ----   -------     -------     -------     -------     -------
        54         20             34           44       92 

//Inserting in a linked list:

        Node1       Node2       Node3       Node4       Node5
  head  _______     _______     _______     _______     _______   
 ____   |  |  |     |  |  |     |  |  |     |  |  |     |  |  |
|    |  |12|20|---->|8 |34|---->|3 |44|---->|7 |92|---->|9 |\0|
| 54 |->|  |  |     |  |  |     |  |  |     |  |  |     |  |  |
 ----   -------     -------     -------     -------     -------
        54         20             34           44       92 

There are 3 ways to insert a node in a linked list:
1. Add at begin.
2. Add at middle or Add at given position.
3. Add at end.

For acheiving this, we need to give index to our nodes like:
        Node1       Node2       Node3       Node4       Node5
  head  _______     _______     _______     _______     _______   
 ____   |  |  |     |  |  |     |  |  |     |  |  |     |  |  |
|    |  |12|20|---->|8 |34|---->|3 |44|---->|7 |92|---->|9 |\0|
| 54 |->|  |  |     |  |  |     |  |  |     |  |  |     |  |  |
 ----   -------     -------     -------     -------     -------
        54         20             34           44       92 
        1st Node   2nd Node     3rd Node    4th Node    5th Node

1. Add at begin steps:
a) Create a new Node (For example t Node)
b) Initialize the node with data
c) Make that Node point to first Node.
d) Make first Node to point to newly created Node.

                        Node1       Node2       Node3       Node4       Node5
   t              head  _______     _______     _______     _______     _______   
 ___             ____   |  |  |     |  |  |     |  |  |     |  |  |     |  |  |
| | |           |    |  |12|20|---->|8 |34|---->|3 |44|---->|7 |92|---->|9 |\0|
| | |           | 54 |->|  |  |     |  |  |     |  |  |     |  |  |     |  |  |
 ---             ----   -------     -------     -------     -------     -------
                        54         20             34           44       92 
                        1st Node   2nd Node     3rd Node    4th Node    5th Node

a) Create a new Node (For example t Node)
struct Node *t=(struct Node*) malloc(sizeof(struct Node));

b) Initialize the node with data
t->data=value;

c) Make that Node point to first Node.
t->next=first;

d) Make first Node to point to newly created Node.
first=t;

2. Add at middle or Add at given position.
a) Create a new Node (For example t Node)
struct Node *t=(struct Node*)malloc(sizeof(struct Node));

b) Initialize the node with data
t->data=value;

c) Take the position of Node at where you want to enter your Node.
struct Node*p=(struct Node*)malloc(sizeof(struct Node));
pos=value;

d) Take a pointer(p) and move it till p reaches pos-1 times.
p=head;
for(i=0; i<pos-1; i++)
    p=p->next;

e)t->next should point to p->next.
t->next=p->next;

f) p->next should point to t.
p->next=t;


//Deleting a Node from a linked list:
For deleting a Node there are 2 cases:
1. Delete a first Node:
If we are deleting first Node then we have to take special care as the next node will become first Node.
We have to use a pointer to point to first node and then first should point to next node and then with free we can deallocate the memory
occupied by first Node in heap memory.
2. Delete a Node at given position.
